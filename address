#include <iostream>
using namespace std;
#include <string>
#define MAX 1000
// 封装函数显示界面 如void showFunction()
void showMenu()
{
    cout << "***************************\n";
    cout << "*****  1、添加联系人   *****\n";
    cout << "*****  2、显示联系人   *****\n";
    cout << "*****  3、删除联系人   *****\n";
    cout << "*****  4、查找联系人   *****\n";
    cout << "*****  5、修改联系人   *****\n";
    cout << "*****  6、清空联系人   *****\n";
    cout << "*****  0、退出通讯录   *****\n";
    cout << "***************************\n";
}

// 添加联系人
// 功能描述：实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）
// 设计联系人的结构体
struct Person
{
    string m_name;  // 姓名
    int m_sex;      // 性别  1、男  2、女
    int m_age;      // 年龄
    string m_phone; // 电话号码
    string m_home;  // 家庭住址
};

// 设计通讯录的结构体
struct addressbooks
{
    struct Person personArray[MAX]; // 通讯录中联系人的数组
    int current_size;               // 当前联系人的个人
};

// 添加联系人
void addPerson(struct addressbooks *abs)
{
    // 先判断通讯录是否满了
    if (abs->current_size == MAX)
    {
        cout << "通讯录当前已满，无法添加!\n";
        return;
    }
    else
    {
        // 添加联系人
        // 姓名
        string name;
        cout << "请输入姓名:";
        cin >> name;
        abs->personArray[abs->current_size].m_name = name;
        // 性别
        int sex;
        cout << "\n1、男  2、女\n请输入性别：";
        while (true)
        {
            cin >> sex;
            if (sex == 1 || sex == 2)
            {
                abs->personArray[abs->current_size].m_sex = sex;
                break;
            }
            else
                cout << "输入有误，请重新输入！";
        }

        // 年龄
        int age;
        cout << "\n请输入年龄：";
        cin >> age;
        abs->personArray[abs->current_size].m_age = age;
        // 电话
        string phone;
        cout << "\n请输入电话：";
        cin >> phone;
        abs->personArray[abs->current_size].m_phone = phone;
        // 住址
        string home;
        cout << "\n请输入家庭地址：";
        cin >> home;
        abs->personArray[abs->current_size].m_home = home;
        
        //添加成功，当前的通讯录人数加一
        abs->current_size++;
        cout<<"添加成功！\n";
        // system("pause"); //按任意键继续
        system("cls"); //清屏
    }
};

//显示联系人
void showPerson(struct addressbooks *abs)
{
    if(abs->current_size == 0){
        cout<<"当前联系人列表为空！\n";
    }
    else{
    	for(int i = 0;i < abs->current_size;i++){
            cout<<"姓名："<<abs->personArray[i].m_name
                <<"\t性别："<<(abs->personArray[i].m_sex == 1?"男":"女") 
                <<"\t年龄："<<abs->personArray[i].m_age
                <<"\t电话："<<abs->personArray[i].m_phone
                <<"\t家庭地址："<<abs->personArray[i].m_home<<endl;
	}
	}
	system("pause");
	system("cls");
};

// 用main()函数调用封装的函数
int main()
{
    // 创建一个通讯录的结构体变量
    addressbooks abs;
    abs.current_size = 0; // 当前的联系人个数为0
    int select;           // 创建用户输入的变量
    while (true)
    {
        showMenu();
        cout << "请输入你的选择：" << endl;
        cin >> select;
        switch (select)
        {
        case 1:              // 1、添加联系人
            addPerson(&abs); // 利用地址传递修饰实参
            break;
        case 2: // 2、显示联系人
            showPerson(&abs);
            break;
        case 3: // 3、删除联系人
            break;
        case 4: // 4、查找联系人
            break;
        case 5: // 5、修改联系人
            break;
        case 6: // 6、清空联系人
            break;
        case 0: // 退出通讯录
            cout << "欢迎下次使用\n";
            return 0;
            break;
        default:
            break;
        }
    }

    system("pause");
}
